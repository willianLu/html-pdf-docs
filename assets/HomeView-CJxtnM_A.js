import{d as r,c as a,a as n,o,b as s,u as i,_ as l}from"./index-D5kk3SGA.js";const c=""+new URL("example-B_uq3Jhe.jpg",import.meta.url).href,m={class:"markdown-body"},p=r({__name:"README",setup(h,{expose:d}){return d({frontmatter:{},excerpt:void 0}),(t,e)=>(o(),a("div",m,e[0]||(e[0]=[n(`<h1>html-to-pdf 使用说明</h1><blockquote><p>本库致力于 html 在线导出为 pdf，实现智能分页效果，不会切断文本图片表格等内容，可兼容手机端。本库依赖 html2canvas 和 jspdf，使用 canvas 绘图，请保证使用浏览器对以上库是支持的。</p></blockquote><p><a href="https://willianlu.github.io/html-pdf-docs/#/demo">html-to-pdf 示例</a></p><p><a href="https://github.com/willianLu/html-pdf-docs">html-to-pdf 示例源码地址</a></p><h2>安装</h2><pre><code class="language-bash"># 使用npm
npm i -S @wk-tools/html-to-pdf
# 使用yarn
yarn add @wk-tools/html-to-pdf
</code></pre><h2>用法</h2><pre><code class="language-ts">// ...
import HtmlToPdf from &#39;@wk-tools/html-to-pdf&#39;

function exportPDF() {
  Loading.show()
  const element = document.getElementById(&#39;pdf-container&#39;)
  const htmlToPdf = new HtmlToPdf(element, {
    name: &#39;葵花宝典&#39;,
  })
  htmlToPdf
    .save()
    .catch(() =&gt; {
      Message.error(&#39;下载失败&#39;)
    })
    .finally(() =&gt; {
      Loading.hide()
    })
}
</code></pre><h2>类/属性/方法/参数等说明</h2><h3>HtmlToPdfClass</h3><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>$el</td><td>HTMLElement</td><td>PDF DOM 元素</td></tr><tr><td>jsPdf</td><td>JsPdf</td><td>JsPdf 实例</td></tr><tr><td>pdfWidth</td><td>number</td><td>PDF 单页宽度</td></tr><tr><td>pdfHeight</td><td>number</td><td>PDF 单页高度</td></tr><tr><td>options</td><td>PdfOptions</td><td>PDF 配置</td></tr><tr><td>plugins</td><td>PluginWrap</td><td>插件列表</td></tr><tr><td>createVirtualWrap</td><td>(element: Node | Element, width: number) =&gt; HTMLDivElement</td><td>创建虚拟 DOM，并设定宽度</td></tr><tr><td>createCanvas</td><td>(width: number, height: number) =&gt; HTMLCanvasElement</td><td>创建 虚拟 canvas 元素</td></tr><tr><td>loadImage</td><td>(url: string) =&gt; Promise</td><td>加载图片，并返回 image 元素</td></tr><tr><td>waitForImagesLoaded</td><td>(element: Element) =&gt; Promise</td><td>等待图片加载完成，并针对图片设置通用样式</td></tr><tr><td>resetBaseStyle</td><td>(element: Element) =&gt; void</td><td>重置元素样式，默认针对 h1-h6 的 margin 样式设置</td></tr><tr><td>getPageImages</td><td>Promise</td><td>获取生成 PDF 的页面图片</td></tr><tr><td>addPageImage</td><td>(image: string) =&gt; void</td><td>将图片加入 PDF 页面管理中，将会作为 PDF 页面导出</td></tr><tr><td>preview</td><td>() =&gt; void</td><td>预览生成的 PDF 内容</td></tr><tr><td>save</td><td>() =&gt; Promise</td><td>生成 PDF</td></tr><tr><td>use</td><td>user(plugin: PdfPlugin, pluginOptions?: T) =&gt; void</td><td>注册插件</td></tr></tbody></table><blockquote><p>注意：resetBaseStyle 与 waitForImagesLoaded 包含的重制样式，是因为 html2canvas 在导出图片时，某些样式会与 DOM 元素不一致，故要增加特定样式以达到所见即所得。若是遇到页面所见与导出不一致，请着重思考样式问题。</p></blockquote><h3>PdfOptions</h3><table><thead><tr><th>参数</th><th>类型</th><th>必填项</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>否</td><td>–</td><td>导出文件名称</td></tr><tr><td>monoblockClassName</td><td>string | string[]</td><td>否</td><td>‘html-pdf-monoblock’</td><td>分页处理时，将元素内容当作一个整体</td></tr><tr><td>backgroundColor</td><td>string</td><td>否</td><td>#fff</td><td>PDF 背景颜色</td></tr><tr><td>scale</td><td>number</td><td>否</td><td>2</td><td>导出内容放大倍数，增加内容清晰度，必须大于 0</td></tr><tr><td>margin</td><td>number | number[]</td><td>否</td><td>10</td><td>PDF 内容边距</td></tr><tr><td>ignoreElement</td><td>(element: Element) =&gt; Element[]</td><td>否</td><td>–</td><td>分页计算忽略的元素</td></tr><tr><td>resetStyleTags</td><td>string[]</td><td>否</td><td>–</td><td>需要重置样式的标签，目前只发现 h1-h6 标签在 html2canvas 中默认增加了 margin 值</td></tr><tr><td>header</td><td>HeaderOrFooterOptions</td><td>否</td><td>–</td><td>页眉参数</td></tr><tr><td>footer</td><td>HeaderOrFooterOptions</td><td>否</td><td>–</td><td>页脚参数</td></tr><tr><td>adaptive</td><td>boolean</td><td>否</td><td>true</td><td>是否开启自适应，开启自适应会根据设置宽度导出 PDF</td></tr><tr><td>adaptiveOptions</td><td>AdaptiveOptions</td><td>否</td><td>–</td><td>自适应导出 PDF 配置</td></tr><tr><td>jsPDFOptions</td><td>jsPDFOptions</td><td>否</td><td>{ unit: “px”, format: “a4” }</td><td>jsPDF 插件配置，单位仅支持 px</td></tr><tr><td>html2CanvasOptions</td><td>html2CanvasOptions</td><td>否</td><td>{ scale: PdfOptions.scale ,logging: false,useCORS: true,width: element.width}</td><td>html2canvas 插件配置</td></tr></tbody></table><h3>HeaderOrFooterOptions</h3><table><thead><tr><th>参数</th><th>类型</th><th>必填项</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td>image</td><td>string</td><td>否</td><td>–</td><td>页眉页脚图片地址</td></tr><tr><td>imageWidth</td><td>number</td><td>否</td><td>–</td><td>页眉页脚图片绘制宽度</td></tr><tr><td>imageHeight</td><td>number</td><td>否</td><td>–</td><td>页眉页脚图片绘制高度</td></tr><tr><td>text</td><td>string</td><td>否</td><td>–</td><td>页眉页脚文案内容</td></tr><tr><td>fontSize</td><td>number</td><td>否</td><td>–</td><td>页眉页脚文案字体大小</td></tr><tr><td>fontFamily</td><td>string</td><td>否</td><td>–</td><td>页眉页脚文案字体</td></tr><tr><td>align</td><td>“left” | “center” | “right”</td><td>否</td><td>–</td><td>页眉页脚文案对齐方式</td></tr><tr><td>color</td><td>string</td><td>否</td><td>–</td><td>页眉页脚文案颜色</td></tr></tbody></table><h3>AdaptiveOptions</h3><table><thead><tr><th>参数</th><th>类型</th><th>必填项</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td>pdfWidth</td><td>number</td><td>否</td><td>800</td><td>按此宽度绘制导出 PDF 内容</td></tr><tr><td>parentElement</td><td>HTMLElement</td><td>否</td><td>document.body</td><td>自适应创建元素挂载节点，必要时可以规避一些样式问题</td></tr><tr><td>resetView</td><td>(element: Element) =&gt; void</td><td>否</td><td>–</td><td>自适应模式下，是克隆的元素，导致 canvas 无法展示，对内容重新绘制</td></tr><tr><td>resetViewDelay</td><td>number</td><td>否</td><td>1000</td><td>图表重绘后，延迟处理导出，给图表绘制预留充足的时间</td></tr></tbody></table><h3>PdfPlugin</h3><blockquote><p>为了方便扩展基础功能，PDF 生成增加了插件机制。插件有 beforeDraw、draw、afterDraw 三个钩子，通过钩子可以增加 PDF 页面，或者在 PDF 页面中增加自定义内容（页眉页脚）。本工具内置了页眉页脚插件，并开放了封面、封底插件，用于用户参考使用。若是有目录或水印需求，可通过插件实现。</p></blockquote><table><thead><tr><th>方法</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>beforeDraw</td><td>Function</td><td>PDF 绘制前的钩子，可用于封面的绘制</td></tr><tr><td>draw</td><td>Function</td><td>PDF 单页面绘制的钩子，可用于绘制水印等自定义内容</td></tr><tr><td>afterDraw</td><td>Function</td><td>PDF 绘制后的钩子，可用于绘制封底</td></tr></tbody></table><h3>SinglePageOptions</h3><table><thead><tr><th>参数</th><th>类型</th><th>必填项</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td>pageMargin</td><td>PageMargin</td><td>是</td><td>–</td><td>PDF 绘制的边距(上下左右)</td></tr><tr><td>widthRatio</td><td>number</td><td>是</td><td>–</td><td>绘制的 canvas 与 pdf 尺寸 - 转化宽度比</td></tr><tr><td>y</td><td>number</td><td>是</td><td>–</td><td>绘制 canvase 的 y 轴坐标</td></tr><tr><td>canvasWidth</td><td>number</td><td>是</td><td>–</td><td>单页 canvas 的宽度</td></tr><tr><td>canvasHeight</td><td>number</td><td>是</td><td>–</td><td>单页 canvas 的高度</td></tr><tr><td>contentWidth</td><td>number</td><td>是</td><td>–</td><td>单页内容的宽度，去除左右边距</td></tr><tr><td>contentHeight</td><td>number</td><td>是</td><td>–</td><td>单页内容的高度，去除上下边距</td></tr><tr><td>page</td><td>number</td><td>是</td><td>–</td><td>当前页码</td></tr><tr><td>totalPage</td><td>number</td><td>是</td><td>–</td><td>总页码</td></tr></tbody></table><h2>封面/底插件</h2><h3>CoverPluginOptions</h3><table><thead><tr><th>参数</th><th>类型</th><th>必填项</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td>cover</td><td>CoverOptions</td><td>否</td><td>–</td><td>封面参数</td></tr><tr><td>backcover</td><td>CoverOptions</td><td>否</td><td>–</td><td>封底参数</td></tr></tbody></table><h3>CoverOptions</h3><table><thead><tr><th>参数</th><th>类型</th><th>必填项</th><th>默认</th><th>说明</th></tr></thead><tbody><tr><td>backgroundColor</td><td>string</td><td>否</td><td>#fff</td><td>背景颜色</td></tr><tr><td>image</td><td>string</td><td>否</td><td>–</td><td>背景图片</td></tr><tr><td>fit</td><td>“fill” | “contain” | “cover” | “none”</td><td>否</td><td>–</td><td>图片填充方式</td></tr><tr><td>text</td><td>string</td><td>否</td><td>–</td><td>封面/底 文案内容</td></tr><tr><td>fontSize</td><td>number</td><td>否</td><td>32</td><td>文案字体大小</td></tr><tr><td>fontWeight</td><td>string | number</td><td>否</td><td>‘bold’</td><td>文案字体粗细</td></tr><tr><td>fontFamily</td><td>string</td><td>否</td><td>“微软雅黑”</td><td>文案字体</td></tr><tr><td>color</td><td>string</td><td>否</td><td>–</td><td>文案颜色</td></tr><tr><td>element</td><td>HTMLElement</td><td>否</td><td>–</td><td>封面/底 DOM 元素，将转化成图片</td></tr><tr><td>elementFit</td><td>“fill” | “contain” | “cover” | “none”</td><td>否</td><td>–</td><td>封面/底 DOM 元素填充方式</td></tr></tbody></table><h2>License</h2><p>MIT</p>`,30)])))}}),g={class:"wk-content"},f=r({name:"HomePage",__name:"HomeView",setup(h){return(d,t)=>(o(),a("div",g,[t[0]||(t[0]=n('<h2 class="wk-content__title" data-v-ec599f7c>简述</h2><div class="wk-content__section" data-v-ec599f7c> 本插件旨在实现HTML导出PDF场景智能化分页，规避文字、图片、canvas等被分页切断。通常情况下，通用的报告文档，分页都具有良好的表现，但一些特殊情况，分页会变得复杂和难以控制，出于降低代码的复杂度,和特殊场景的稀少，特殊情况暂不采用智能分页。 </div><h2 class="wk-content__title" data-v-ec599f7c>智能分页思路</h2><div class="wk-content__section" data-v-ec599f7c> 本插件利用<a href="https://html2canvas.hertzen.com/" target="_blank" data-v-ec599f7c>html2canvas</a> 将Element元素生成一个Canvas，再根据PDF的高度进行分页计算，根据每一页的分页节点(Y坐标)截取部分内容，通过创建一个虚拟canvas，连同页眉页脚,绘制整个PDF单页，通过 <a href="https://www.jspdf.top/" target="_blank" data-v-ec599f7c>jspdf</a>将多个单页合并成一个完整的PDF文件。 </div><div class="wk-content__section" data-v-ec599f7c> 计算分页节点，会遇到文字、图片、表格、canvas等被切断，本插件会按照一定规则优化切断处Y坐标，避免内容被切断。 </div><ul class="wk-content__list" data-v-ec599f7c><li data-v-ec599f7c> 段落文案内容分页 - 通过段落的高度和行高比对，精确找出被合理分段的Y坐标，在该坐标位置进行分页。 </li><li data-v-ec599f7c> 图片、canvas、表格、自定义整体内容等分页 - 图片和canvas是一个整体；表格单行内容复杂，多个td内容无法精准对齐，故将表格的整行tr看作一个整体；图文组合、定位等脱离文档流的布局，都需看作一个整体。对整体内容分页，规则比较简单，当页无法容纳整体内容，则顺移到下一页。特殊情况，若整体内容超过PDF的单页高度，则默认不处理，即内容会被正常切断（若是有大量改场景，后期考虑予以支持）。 </li><li data-v-ec599f7c>自定义页眉页脚 - 页眉页脚目前仅支持文字，支持左、中、右三个位置。</li></ul><img class="wk-content__example" src="'+c+'" data-v-ec599f7c>',7)),s(i(p))]))}}),u=l(f,[["__scopeId","data-v-ec599f7c"]]);export{u as default};
